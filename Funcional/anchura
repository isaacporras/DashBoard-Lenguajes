#lang racket



 



(define (solucion? fin ruta)
  (equal? fin (car ruta))

  )

(define (miembro? lista buscado)
  (cond
    [(= (length lista) 0) #f]
    [(= (car lista) buscado) #t]
    [else (miembro? (cdr lista) buscado)]
  )
)


(define (vecinos ele grafo)
  (let ((resultado (assoc ele grafo))
    )
  (cond ((equal? resultado #f)
         #f)
        (else  (cadr resultado))



  )))

(define (extender ruta grafo)
  (apply append
         (map (lambda(x)

                (cond ((miembro? x ruta '()))
                       (else (list (cons x ruta)))))

                (vecinos (car ruta) grafo)



                )
         



         )




  )

(define (anchura-todas ini fin grafo)

  (recorrido-anchura-aux (list (list ini)) fin grafo '())
  )

(define (recorrido-anchura-aux rutas fin grafo total)
  (cond [(null? rutas) (map reverse total)]
        [(solucion? fin (car rutas)) (recorrido-anchura-aux (cdr rutas) fin grafo (cons (car rutas) total))]
 
    [else
     (recorrido-anchura-aux (append (cdr rutas) (extender (car rutas) grafo)) fin grafo total)]
    ))
     

